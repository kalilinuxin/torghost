#!/usr/bin/env python3
"""
TorGhost - Clean and Working Version
"""

import os
import sys
import subprocess
import time
import signal
from stem import Signal
from stem.control import Controller


class bcolors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    RED = '\033[31m'
    YELLOW = '\033[93m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def t():
    return "[" + time.strftime('%H:%M:%S') + "]"


def sigint_handler(signum, frame):
    print('\nUser interrupt! Shutting down')
    shutdown()


def shutdown():
    print(f"\n{t()} Shutting down torghost")
    sys.exit()


def logo():
    os.system("clear")
    print(f"{bcolors.RED}{bcolors.BOLD}")
    print("""
      _____           ____ _               _
     |_   _|__  _ __ / ___| |__   ___  ___| |_
       | |/ _ \| '__| |  _| '_ \ / _ \/ __| __|
       | | (_) | |  | |_| | | | | (_) \__ \ |_
       |_|\___/|_|   \____|_| |_|\___/|___/\__|
    v2.0 - Koushik Pal
    """)
    print(f"{bcolors.ENDC}")


def usage():
    logo()
    print("""
    USAGE:
        sudo torghost start   (start torghost)
        sudo torghost stop    (stop torghost) 
        sudo torghost switch  (switch IP)
        torghost status       (show status)
    """)
    sys.exit()


def get_ip():
    try:
        result = subprocess.run(['curl', '-s', 'https://api.ipify.org'], 
                              capture_output=True, text=True)
        return result.stdout.strip()
    except:
        return "Unknown"


def start_torghost():
    # Configure torrc
    torrc_content = """
## TorGhost Configuration
VirtualAddrNetwork 10.0.0.0/10
AutomapHostsOnResolve 1
TransPort 9040
DNSPort 53
ControlPort 9051
"""
    
    with open('/etc/tor/torrc', 'a') as f:
        f.write(torrc_content)
    
    # Configure DNS
    with open('/etc/resolv.conf', 'w') as f:
        f.write("nameserver 127.0.0.1\n")
    
    # Start services
    subprocess.run(['systemctl', 'start', 'tor'])
    
    # Setup iptables
    tor_uid = subprocess.run(['id', '-u', 'debian-tor'], 
                           capture_output=True, text=True).stdout.strip()
    
    iptables_script = f"""
iptables -F
iptables -t nat -F
iptables -t nat -A OUTPUT -m owner --uid-owner {tor_uid} -j RETURN
iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 53
iptables -t nat -A OUTPUT -d 192.168.1.0/24 -j RETURN
iptables -t nat -A OUTPUT -d 192.168.0.0/24 -j RETURN  
iptables -t nat -A OUTPUT -d 127.0.0.0/8 -j RETURN
iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports 9040
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -d 192.168.1.0/24 -j ACCEPT
iptables -A OUTPUT -d 192.168.0.0/24 -j ACCEPT
iptables -A OUTPUT -d 127.0.0.0/8 -j ACCEPT
iptables -A OUTPUT -m owner --uid-owner {tor_uid} -j ACCEPT
iptables -A OUTPUT -j REJECT
"""
    
    subprocess.run(['bash', '-c', iptables_script])
    print(f"{t()} CURRENT IP: {bcolors.GREEN}{get_ip()}{bcolors.ENDC}")


def stop_torghost():
    # Flush iptables
    subprocess.run(['bash', '-c', """
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t nat -F
iptables -t mangle -F
iptables -F
iptables -X
"""])
    
    # Restore network
    subprocess.run(['systemctl', 'restart', 'NetworkManager'])
    print(f"{t()} CURRENT IP: {bcolors.GREEN}{get_ip()}{bcolors.ENDC}")


def switch_tor():
    with Controller.from_port(port=9051) as controller:
        controller.authenticate()
        controller.signal(Signal.NEWNYM)
    time.sleep(5)
    print(f"{t()} CURRENT IP: {bcolors.GREEN}{get_ip()}{bcolors.ENDC}")


def show_status():
    ip = get_ip()
    tor_status = subprocess.run(['systemctl', 'is-active', 'tor'], 
                              capture_output=True, text=True).stdout.strip()
    print(f"Tor Status: {tor_status}")
    print(f"Current IP: {ip}")


# Main execution
signal.signal(signal.SIGINT, sigint_handler)

if len(sys.argv) < 2:
    usage()

command = sys.argv[1].lower()

if command == "start":
    logo()
    start_torghost()
elif command == "stop":
    logo()
    stop_torghost()
elif command == "switch":
    switch_tor()
elif command == "status":
    show_status()
else:
    usage()
